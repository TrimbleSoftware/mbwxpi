#!/usr/bin/awk -f
#
#	mbwxpi.plugin		Meteobridge plugin weatherstation to read wxnow.txt file 
#
#  Copyright 2021 by Fred T. Trimble (ftt@smtcpa.com)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#	Meteobridge user-defined plugin weatherstation to read, parse, convert
#	and output weather data contained in a wxnow.txt file as a Meteobridge
#	weatherstation. Operation of the plugin is customized by editing the
#	accompanying UCI style config file.
#
#	Written 25-Mar-2021 by Fred T. Trimble Ver 0.9.8a (ftt@smtcpa.com) and user AlaskaWX on Meteobridge forum
#
#	wxnow.txt file format per https://cumuluswiki.org/a/Wxnow.txt
#	Feb 01 2009 12:34
#	272/010g006t069r010p030P020h61b10150
#    /   g   t   r   p   P   h  b
#	from http://104.56.43.104/wxnow.txt
#	Mar 25 2021 16:16
#	325/004g005t068r000p000P074h085b09934
# plugin timestamp: https://forum.meteohub.de/viewtopic.php?p=10003#p10003
#	awk lang reference:
#		http://www.math.utah.edu/docs/info/gawk_toc.html
#		https://www.gnu.org/software/gawk/manual/html_node/index.html#SEC_Contents

# write timestampped message to logfile ala mb style
function writelog(path, name, message)
{
	system("echo '"name" ("strftime("%d.%m.%Y %T",systime())"): "message"' >> "path" 2>/dev/null")
}

# convert altimeter to station pressure
#		amb: altermiter in millibars
#		sam: station altitude in meters
#		returns station pressure in millibars
function alttosta(amb, sam)
{
	return (amb * 0.02953 * ((288.0 - 0.0065 * sam) / 288.0) ^ 5.2561) * 33.8639
}

# convert °F to °C
function ftoc (f)
{
	return ((f - 32) * 5/9)
}

# main program
BEGIN {

	myname = "mbwxpi"
	ver = "0.9.8a" # version
	exit_code = -1
	last_time = 0.0
	this_time = 0.0
	rain_rate = 0.0
	rain_day = 0.0
	last_rain_day = 0.0
	total_rain = 0.0
	last_total_rain = 0.0

	month["Jan"] = "01"
	month["Feb"] = "02"
	month["Mar"] = "03"
	month["Apr"] = "04"
	month["May"] = "05"
	month["Jun"] = "06"
	month["Jul"] = "07"
	month["Aug"] = "08"
	month["Sep"] = "09"
	month["Oct"] = "10"
	month["Nov"] = "11"
	month["Dec"] = "12"

	# default values to use if no config file
	# the os command used to return the content of the wxnow.txt file
	wxnow_cmd = "wget -q -O - 'http://localhost/public/wxnow.txt'"
	station_altitude	 = 0.0
	logfile = "/tmp/log/meteobridge.log"
	pollsleep = 60
	writetolog = 0

	# read plugin config using openwrt uci
	conf = "/tmp/mnt/data/scripts" # location of uci config file

	uci = "uci -c "conf" get "myname".@"myname"[0].wxnow_cmd 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		wxnow_cmd = item
	uci = "uci -c "conf" get "myname".@"myname"[0].station_altitude 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		station_altitude = item + 0.0
	uci = "uci -c "conf" get "myname".@"myname"[0].total_rain 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		total_rain = item + 0.0
	uci = "uci -c "conf" get "myname".@"myname"[0].logfile 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		logfile = item
	uci = "uci -c "conf" get "myname".@"myname"[0].pollsleep 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		pollsleep = item + 0.0
	uci = "uci -c "conf" get "myname".@"myname"[0].writetolog 2>/dev/null"
	item = ""	
	uci | getline item
	close(uci)
	if(length(item) > 0)
		writetolog = item + 0.0

	if(writetolog > 1)
	{
		writelog(logfile, myname, "wxnow.txt plugin weather station (version "ver") started.")
		writelog(logfile, myname, "polling interval "pollsleep" seconds.")
		writelog(logfile, myname, "read wxnow.txt command line: '"wxnow_cmd"'")
	}

	t = systime()
	ssm = strftime("%S",t) + (strftime("%M",t) * 60) + (strftime("%H",t) * 3600) # seconds since midnight
	if(pollsleep - ((ssm % pollsleep) > 0))
	{
		if(writetolog > 1)
				writelog(logfile, myname, "inital sleep "pollsleep - (ssm % pollsleep)" seconds.")

		exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # initial sleep
	}

	if(exit_code != 0)
	{
		do # main plugin infinite loop
		{
			i = 1
			while((wxnow_cmd | getline wxnow_raw) > 0) # run os cmd to get raw data from wxnow.txt
				wxnow_line[i++] = wxnow_raw

			close(wxnow_cmd)

			if(length(wxnow_line[1]) > 0)
			{
				if(split(wxnow_line[1], datea, /[ :]/) == 5) # regexp to parse wxnow.txt timestamp
					this_time = mktime(datea[3]" "month[datea[1]]" "datea[2]" "datea[4]" "datea[5]" 00") # convert timestamp into unix epoch time
				else
				{
					if(writetolog > 0)
						writelog(logfile, myname, "error parsing wxnow.txt timestamp :" wxnow_line[1])

					continue
				}
			}

			if(this_time > last_time) # is data new?
			{ 
				#if it's new, parse...
				if(length(wxnow_line[2]) > 0)
				{
					if(split(wxnow_line[2], val, /[\/,g,t,r,p,P,h,b]/) == 9) # regexp to parse wx data
					{
						if(writetolog > 2)
						{
							writelog(logfile, myname, sprintf("wxnow_line[2] == %s", wxnow_line[2]))
							for(i in val)
								writelog(logfile, myname, sprintf("val[%d] == %s", i, val[i]))
						}

						# convert data into fractional SI units as req by meteobridge
						winddir = val[1] + 0.0 # wind dir, deg
						windspd = (val[2] + 0.0) * 4.4704 # wind speed, mph, convert to 0.1 m/s
						windgust = (val[3] + 0.0) * 4.4704  # wind gust, mph, convert to 0.1 m/s
						temp = ftoc(val[4] + 0.0) * 10 # temp, °F convert to 0.1 °C
#						rain_1hr = (val[5] + 0.0) * 2.54 # rain in last hr, 0.01 in, convert to 0.1 mm
#						rain_24hr = (val[6] + 0.0) * 2.54  # rain in last 24 hrs, 0.01 in, convert to 0.1 mm
						rain_day = (val[7] + 0.0) * 2.54 # rain since midnight, 0.01 in, convert to 0.1 mm
						hum = (val[8] == 0? 100: val[8] + 0.0) # hum, %  (00 == 100%)
						baro = alttosta(val[9] / 10.0, station_altitude) * 10 # convert altimiter to station press, 0.1 millibar

						if(rain_day >= last_rain_day)
							total_rain += (rain_day - last_rain_day)
						else
							total_rain += rain_day

						if(total_rain > last_total_rain)
							rain_rate = ((total_rain - last_total_rain) / ((this_time - last_time) / 3600.0)) # increasing rain rate in 0.1 mm/hr
						else
							rain_rate = 0.0

						if(total_rain > 999999) # keep total rain from eventually overflowing
							total_rain = 0

						# ...and output values to meteobridge via stdout as SI units using source data timestamp
						printf(":%s th0 %1.0f %d\n", this_time, temp, hum) # temp 0.1 °C, % hum
						printf(":%s thb0 %1.0f %d %1.0f\n", this_time, temp, hum, baro) # temp °C, % hum, baro 0.1 mb
						printf(":%s wind0 %d %1.0f %1.0f\n", this_time, winddir, windgust, windspd) # gust, wind speed 0.1 m/s
						printf(":%s rain0 %1.0f %1.0f\n", this_time, rain_rate, total_rain) # rain rate, total rain, 0.1 mm

						if(writetolog > 2)
							writelog(logfile, myname, "output sensor data to meteobridge with timestamp: "this_time)

						if(total_rain > last_total_rain)
						{
							# save total rain to uci config file
							uci = "uci -c "conf" set "myname".@"myname"[0].total_rain='"sprintf("%1.0f", total_rain)"' 2>/dev/null"
							system(uci)
							uci = "uci -c "conf" commit "myname" 2>/dev/null"
							system(uci)
						}

						last_rain_day = rain_day
						last_total_rain = total_rain
						last_time = this_time

						delete val
					}
					else
					{
						if(writetolog > 0)
							writelog(logfile, myname, "error parsing wxnow.txt weather data: "wxnow_line[2])

							continue
					}
				}
			}

			system("") # flush all i/o buffers
			wxnow_raw = ""
			delete wxnow_line
			t = systime()
			ssm = strftime("%S",t) + (strftime("%M",t) * 60) + (strftime("%H",t) * 3600) # seconds since midnight
			exit_code = system("sleep "pollsleep - (ssm % pollsleep)" && exit 27") # polling sleep

		} while(exit_code != 0)
	}
}
